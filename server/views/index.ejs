<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200" />
    <style>
       /* width */
::-webkit-scrollbar {
  width: 10px;
}

/* Track */
::-webkit-scrollbar-track {
  background: #f1f1f118; 
}
 
/* Handle */
::-webkit-scrollbar-thumb {
  background: #888; 
  border-radius: 10px;
  
}

/* Handle on hover */
::-webkit-scrollbar-thumb:hover {
  background: #555; 
  cursor: grab;
}
       * {
       margin: 0;
        padding: 0;
        box-sizing: border-box;
       } 
     .send {
        width: 60%;
        border-radius: 10px;
        display: flex;
        align-items: center;
        background-color: rgb(0, 128, 38);
        margin: 0 auto;
     }
     .send textarea {
        width: 85%;
        height: 50px;
        padding: 6px;
        margin: 6px;
        border-radius: 10px;
     }
     .send button {
        border: none;
        background-color: rgba(0, 0, 0, 0.493);
        width: 50px;
        height: 50px;
        cursor: pointer;
        border-radius: 50%;
     }

     /* test css */





/* The actual timeline (the vertical ruler) */
.timeline {
    max-width: 60%;
    height: 50vh;
    overflow-y: scroll;
  margin: 0 auto;
  margin-top: 30px;
  margin-bottom: 10px;
  scroll-behavior: smooth;
  border-radius: 10px;
  box-shadow: 1px 1px 10px 1px rgba(0, 0, 0, 0.164);
}

/* Container around content */
.container {
  padding: 10px 40px;
  position: relative;
  /* background-color: greenyellow; */
  width: 50%;
}

/* The circles on the timeline */
.container::after {
  /* content: '';
  position: absolute;
  width: 25px;
  height: 25px;
  right: -17px;
  background-color: white;
  border: 4px solid #FF9F55;
  top: 15px;
  border-radius: 50%;
  z-index: 1; */
  display: none;
}

/* Place the container to the left */
.left {
  left: 0;
}

/* Place the container to the right */
.right {
  left: 50%;
}

/* Add arrows to the left container (pointing right) */
.left::before {
  content: " ";
  height: 0;
  position: absolute;
  top: 22px;
  width: 0;
  z-index: 1;
  right: 30px;
  border: medium solid white;
  border-width: 10px 0 10px 10px;
  border-color: transparent transparent transparent white;
}

/* Add arrows to the right container (pointing left) */
.right::before {
  content: " ";
  height: 0;
  position: absolute;
  top: 22px;
  width: 0;
  z-index: 1;
  left: 30px;
  border: medium solid rgba(172, 255, 47, 0.685);
  border-width: 10px 10px 10px 0;
  border-color: transparent rgba(172, 255, 47, 0.685) transparent transparent;
}

/* Fix the circle for containers on the right side */
.right::after {
  left: -16px;
}

/* The actual content */
.content {
  padding: 20px;
  background-color: rgba(172, 255, 47, 0.685);
  position: relative;
  border-radius: 6px;
}

/* Media queries - Responsive timeline on screens less than 600px wide */
@media screen and (max-width: 600px) {
  /* Place the timelime to the left */
  .timeline::after {
  left: 31px;
  }
  
  /* Full-width containers */
  .container {
  width: 100%;
  padding-left: 70px;
  padding-right: 25px;
  }
  
  /* Make sure that all arrows are pointing leftwards */
  .container::before {
  left: 60px;
  border: medium solid white;
  border-width: 10px 10px 10px 0;
  border-color: transparent white transparent transparent;
  }

  /* Make sure all circles are at the same spot  */
  .left::after, .right::after {
  left: 15px;
  }
  
 /* Make all right containers behave like the left ones  */
  .right {
  left: 0%;
  }
}
    </style>
</head>
<body>
    <div class="timeline">
       
      </div>
    
      
       
        <div class="send">
               <textarea name="" id="" cols="30" rows="10" placeholder="type message"></textarea>
           <button>
            <span class="material-symbols-outlined" style="color: white; font-size: 40px;">
            send
            </span>
        </button>
          </div>
  
  
</body>


</html>

    <script src="https://cdn.socket.io/4.5.0/socket.io.min.js" integrity="sha384-7EyYLQZgWBi67fBtVxw60/OWl1kjsfrPFcaU0pp0nAh+i8FD068QogUvg85Ewy1k" crossorigin="anonymous"></script>
<script>
  const socket = io('ws://localhost:5000');

  document.addEventListener("DOMContentLoaded", async function(event) { 
    //fetch user data
    const response = await fetch('http://localhost:3000/api/user')
    const data = await response.json()
    window.user = data.data


    // add user by user id
    socket.emit("addUser", user._id)


    // get users from server
   
    
    socket.on("getUsers", async users => {
        console.log(users);

        const recieverId = users.find( User => User.userId !== user._id)
        console.log(recieverId);
        const res = await fetch('http://localhost:3000/api/conversation',{
     method: 'POST', // or 'PUT'
     headers: {
    'Content-Type': 'application/json',
  },
     body: JSON.stringify({senderId: user._id, recieverId: recieverId.userId}),
         })
     window.currentChat = await res.json();
   
    })


    document.querySelector('button').onclick = ()=> {
        console.log(currentChat);
        const text = document.querySelector('textarea').value
        
        const recieverId = currentChat.data.members.find( chat => chat !== user._id )

        // send message
        if (recieverId) {
        socket.emit('message', {
        senderId: user._id,
        recieverId,
        text: text
    },(response)=> {
     
     })
     const container = document.createElement('div')
        container.classList.add('container', 'right')
     const myChat =
     `
     
          <div class="content">
            <h2>by you</h2>
            <p>${text}</p>
          </div>
      
     
     `
     container.innerHTML = myChat
    document.querySelector('.timeline').append(container)  
    document.querySelector('.timeline').scrollTop = document.querySelector('.timeline').scrollHeight
    }
    // recive message
    socket.on("getMessage", data =>  {
        const container = document.createElement('div')
        container.classList.add('container', 'left')
      const myChat =
      `
    
          <div class="content">
            <h2>2017</h2>
            <p>${data.text}</p>
          </div>
        
    
    `
    container.innerHTML = myChat
    document.querySelector('.timeline').append(container) 
    document.querySelector('.timeline').scrollTop = document.querySelector('.timeline').scrollHeight
  
    console.log(data);
    })
}

   
});

 


  
    
   
 
</script>